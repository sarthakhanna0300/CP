Question Link:
https://codeforces.com/contest/1180/problem/C

Code:
#include<bits/stdc++.h>
#define f(i,a,b) for(i=a;i<b;i++)
#define f_(i,a,b) for(i=a;i>=b;i--)
#define T_ ll t; cin>>t; while(t--)
#define NeedForSpeed ios_base::sync_with_stdio(false); cin.tie(NULL)
#define pb push_back
#define mod 1000000007
#define mp make_pair
#define read(a,n) for(i=0;i<n;i++) cin>>a[i]
#define pr(a,n)  for(i=0;i<n;i++) cout<<a[i] << " "; cout<<"\n"
#define ff first
#define ss second
#define iof freopen("input.txt", "r", stdin);freopen("output.txt", "w", stdout);
#define sp << " " <<
#define nl << "\n"
#define all(s) s.begin(),s.end()
#define minv(a) *min_element(all(a))
#define maxv(a) *max_element(all(a))
#define sumv(a) accumulate(all(a),0)
#define lb lower_bound //lower_bound returns an iterator pointing to the first element in the range [first,last) which has a value not less than ‘val’.
#define ub upper_bound //upper_bound returns an iterator pointing to the first element in the range [first,last) which has a value greater than ‘val’.
#define vi vector<ll>
#define iii = tuple<int, int, ll>
#define vvi = vector<vi>
#define viii = vector<iii>
#define setpre(a) cout << setprecision(a) << fixed

typedef long long ll ; typedef long double ld;
using namespace std;

int main() {
    NeedForSpeed;
//    T_ {
    ll n, i, q;
    cin >> n >> q;
    deque<ll> d;
    ll mx = 0;
    for (i = 0; i < n; i++) {
        ll x;
        cin >> x;
        d.pb(x);
        mx = max(x, mx);
    }
    vector<pair<ll, ll>> v;
    v.pb({0, 0});
    while (d.front() != mx) {
        ll x = d.front();
        d.pop_front();
        ll y = d.front();
        v.pb({x, y});
        d.pop_front();
        if (x < y) {
            swap(x, y);
        }
        d.pb(y);
        d.push_front(x);
    }
    vector<ll> ve;
    d.pop_front();
    while (!d.empty()) {
        ll x = d.front();
        d.pop_front();
        ve.pb(x);
    }
    while (q--) {
        ll m;
        cin >> m;
        if (!v.empty() && m < v.size()) {
            cout << v[m].ff << " " << v[m].ss << "\n";
        } else {
            m -= v.size();
            cout << mx << " " << ve[(m) % ve.size()] << "\n";
        }
    }
//    }
    return 0;
}
